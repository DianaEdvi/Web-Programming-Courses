CSS Cheat sheet
Inline: <html style="background:blue"></html>
Internal: <style><html>{background: red}</style>
External: <link rel ="stylesheet" href="./styles.css" />
Element selector: h1{color: blue}
Class selector: .red-heading{color: red;} // <h2 class="red-text">Red</h2>
ID selector: #main {color: red} // <h2 id="main">Red</h2>
Attribute selector: p[draggable]{color: red} OR p[draggable="false"]{color: red}
Universal selector: *{color: red}
Some properties: color, background-color, font-size, font-family, font-weight, text-align
Center a div: margin: 25% width 50% (make sure any images are width: 100%) 

Cascade: 
Position: Is a rule in a higher or lower position in the code? 
li {
color: red;
color: blue;
}
Output = blue 

Specificity: How specific a selector is in terms of the elements
Element selector (ex li)
Class selector (ex .class)
Attribute (ex [draggable]) 
Id (ex #first-id

Type: External, internal, in-line 
External
Internal
Inline 

Importance: Keyword that you can add to force importance 
color: red;
color: green !important;

Combining Selectors
Group: Applies to both selectors
selector, selector {
color: blueviolet
}

Child: First is the parent, the second is the child 
Only one generation deep. 

selector > selector {
color: firebrick
}

Descendent: ancestor and descendent
Can be multiple generations 

selector selector {
color: blue;
}

Chaining: apply where all selectors are true 
You basically add all the attributes that make up an element to be as specific as you want
Always start with the element, then go to class, id, etc

selectorselector {
color: seagreen;
}

Combining combiners 
selector selectorselector {
font-size: 0.5rem;
}

CSS Positioning 

Static: 
The html default 
Each item goes one after another 

Relative: 
Position relative to its default position

Absolute: 
Position relative to the nearest positioned ancestor or top left corner of the webpage
**Important note: Make sure to set the parent to relative**

Fixed: 
Position relative to top left corner of the browser window 

Display
display : block 
display: inline 
display: inline-block 
display: none 

float: left (makes an element float left, others will wrap around it)
clear: left (or right, or both, clears any float responsibilities)

Media Queries
- Put in instead of a selector 
- @media (max-width: 600px) {
/* CSS for screens below or equal to 600px wide */
}

Combined 
@media (min-width: 600px) and (max-width: 900px) { (Window within this size will have a specific layout, can also do it convex)
}

Flexbox: 

Section 9_Flexbox 

display: inline-flex; 
flex-direction: column; 
flex-basis: sets the height OR width of each item (expands the main axis, depending) *CHILD*

order: 0 *CHILD*

flex-wrap (parent) deals with the overflow of content 
flex-wrap: nowrap; by default if its too long it will get pushed off the page
flex-wrap: wrap; all the elements that dont fit on the page will then wrap around
flex-wrap: wrap-reverse; same as regular wrap, but from the bottom right

justify-content (parent) sets the distribution along the main axis
justify-content: flex-start; everything justifies to the left
justify-content: flex-end; everything justifies to the right
justify-content: center; everything centers
justify-content: space-between; uses up all the space allocated (first and last stuck to the edges of container)
justify-content: space-around; uses up all the space allocated (the space between the edge items adds up to a normal gap)
justify-content: space-evenly; uses up all the space allocated (all items evenly gapped)

align-items (parent): sets the distribution along the cross axis
Need to set the height of the container, or it will be the height of the items
height: 70vh; viewport height (70%)
align-items: flex-start; aligns items to the top
align-items: flex-end; aligns items to the bottom
align-items: center; centers items
align-items: baseline; makes height the height of the items
align-items: stretch; sets vh to 100

align-self (child): the same as align-items but for individual items (good for unique positions of an item)
align-content (parent): similar to align-items, but only works when flex-wrap is set to wrap

Flex sizing 
Content width (words)< width (px's)< flex-basis (width main axis)< min-width (aka longest word)/max-width (longest line of text) (max first)

Flex grow and shrink 
Auto gives more width to boxes with more content, less for less 
flex: 1 1 0 (grow shrink grow)
flex: 1 (aka grow 1 shrink 1 auto 0)
flex 1/2/3 are all abt the ratios compared to one another

Grid

display: grid;
grid-template-columns: 1fr 2fr; 
grid-template-rows: 1fr 1fr; 
gap: 10px; 

grid-template: 100px 200px / 400px 800px (shorthand rows-columns) 
grid-template-rows: 100px auto; (tries to fit 100% of the space) 

Sizing 

grid-template-rows: 1fr 2fr;
grid-template-columns: 200px minmax(400px, 800px) 
grid-column-rows: repeat(2,100px)

grid-auto-rows: 300px; sets row height to automatic 300px

grid-column: span 2; 
grid-area: 2/1/3/3 (row-start, column-start, row-end, column-end)









